import Config

# Configure your database

config :epi_contacts,
       EpiContacts.Repo,
       [
         username: "cc",
         password: "abc123",
         hostname: "localhost",
         port: 5432,
         database: "epi_contacts_dev",
         show_sensitive_data_on_connection_error: true,
         pool_size: 20
       ]
       |> EpiContacts.Database.repo_opts()

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :epi_contacts, EpiContactsWeb.Endpoint,
  debug_errors: true,
  code_reloader: true,
  content_security_policy_options: [header_override: "default-src * 'unsafe-inline'; img-src * 'unsafe-inline';"],
  check_origin: false,
  watchers: [
    esbuild: {
      Esbuild,
      :install_and_run,
      [:default, ~w(--sourcemap=inline --watch)]
    },
    sass: {
      DartSass,
      :install_and_run,
      [:default, ~w(--embed-source-map --source-map-urls=absolute --watch)]
    }
  ],
  strict_transport_security: "",
  http: [ip: {127, 0, 0, 1}, port: 4000]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :epi_contacts, EpiContactsWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/epi_contacts_web/(live|views)/.*(ex)$",
      ~r"lib/epi_contacts_web/templates/.*(eex)$"
    ]
  ]

config :logger, :console,
  format: "$time $metadata[$level] $message\n",
  metadata: [:commcare_case_id, :commcare_domain, :contact_id, :contacts_count, :errors, :request_id, :secure_id]

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :epi_contacts,
  environment_name: "dev",
  secure_session_cookies: false

config :epi_contacts,
  revision_date_epoch_seconds: "1601918940",
  release_level: "dev",
  sentry_ca_bundle: nil,
  sentry_dsn: "not used in dev",
  secure_id_key: "d2FqsR+BGlcBlffGPiYL/URVWdi9Gc3pxd3dMOZUuzw=",
  posthog_api_key: "get this from your local installation of PostHog",
  posthog_api_url: "http://localhost:8000",
  # generate by running: mix phx.gen.secret 44
  encryption_key: "oIzZBtTaOk49gc5X3+W4WYxEXEhTbukPsQ8mcNOwyyI2",
  # create api token in your personal commcare account and fill in with: api_key_owner_email:api_key_value
  # user id (email address) of your personal commcare account.
  # user id of your personal commcare account. find yourself in
  # https://www.commcarehq.org/a/ny-state-covid19/settings/users/web/
  # click on your email, then grab user ID from URL
  commcare_api_token: System.get_env("COMMCARE_API_TOKEN", "token"),
  commcare_username: System.get_env("COMMCARE_USERNAME", "user"),
  commcare_user_id: System.get_env("COMMCARE_USER_ID", "uid")

config :epi_contacts, EpiContactsWeb.Endpoint,
  # anything for dev
  basic_auth_password: "password",
  # anything for dev
  basic_auth_username: "ratiopbc",
  webhook_user: "AzureDiamond",
  webhook_pass: "hunter2",
  live_view: [signing_salt: "xbK8/I1ibfroHQvkZTMKbO7NOLAHtbdP"],
  secret_key_base: "3TjNgvbwkybwa/wmAHz6kgakyAZ5ETIBCGuKRFW1s/ebkOqElLgtQrJrPZqY51cr",
  url: [host: "localhost"]
