defmodule EpiContacts.ObanErrorReporter do
  @moduledoc """
  Listens for telemetry errors generated by Oban and reports them to Sentry
  """

  defmodule JobException do
    defexception message: "Job failed"
  end

  def handle_event([:oban, :job, :exception], measure, meta, _) do
    context =
      meta
      |> Map.take([:id, :args, :queue, :worker])
      |> Map.merge(measure)

    report_event(meta, context)
  end

  def handle_event([:oban, :circuit, :trip], _measure, meta, _) do
    context = Map.take(meta, [:name])

    report_event(meta, context)
  end

  def setup do
    :telemetry.attach_many(
      "oban-errors",
      [[:oban, :job, :exception], [:oban, :circuit, :trip]],
      &handle_event/4,
      nil
    )
  end

  defp report_event(meta, context) do
    case meta.error do
      %HTTPoison.Error{} ->
        Sentry.capture_exception(%JobException{message: "#{meta.worker} #{meta.error.reason}"},
          stacktrace: meta.stacktrace,
          extra: %{extra: context}
        )

      %HTTPoison.Response{} ->
        Sentry.capture_exception(%JobException{message: "#{meta.worker} #{meta.error.status_code} #{meta.error.body}"},
          stacktrace: meta.stacktrace,
          extra: %{extra: context}
        )

      _ ->
        Sentry.capture_exception(meta.error, stacktrace: meta.stacktrace, extra: %{extra: context})
    end
  end
end
